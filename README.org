* Introduction
Diagram Make Language for common lisp.  On the basis of [[https://github.com/tkych/donuts]], 
some simple functions are defined as the syntactic sugar for drawing  UML diagram.

* Install
Install donuts via [[https://www.quicklisp.org][Quicklisp]] , in your lisp image:
#+BEGIN_SRC lisp
(ql:quickload :donuts)
#+END_SRC
System 'donuts' will automatically downlaod to local disk.

Install dml to '~/quicklisp/local-projects/', in your shell:
#+BEGIN_SRC shell
$ cd ~/quicklisp/local-projects/
$ git clone https://github.com/cuichaox/dml.git
#+END_SRC 
System 'dml' will then be loadbale via (ql:quickload :dml). 

* Quick Tutor

Symbol reference Table for fllowing examples. See [[https://github.com/cuichaox/dml/blob/master/src/dml.lisp][src/dml.lisp]] for all symbols:

| name                | type     | descript                                     |
|---------------------+----------+----------------------------------------------|
| $                   | Macro    | Output graph to the viewer                   |
| &                   | Macro    | To generateg grap with node and edge         |
| full-class          | Function | Define a class node                          |
| with-method         | Macro    | Utility to Define share methods for classes. |
| ucas                | Function | Define use case node                         |
| @name               | Function | Reference pre-defined node by name           |
| comp                | Function | Define a componet node                       |
| actor               | Function | Define a stick-man as actor node             |
| -dep-,-dep-*,-dep-- | Function | Define dependcy edge: 1-to-1,1-to-n,1-by-1   |
| -genby-,genby*      | Function | Define generalize edge: 1-to-1,1-ton         |


* Examples

To run Examples, load dml system and change current package to 'donuts'. 

#+BEGIN_SRC lisp
(ql:quickload :dml)
(in-package :donuts)
#+END_src 

Evalate expression:

#+BEGIN_SRC lisp
($ (:outfile "dml.png")
   (& (:rankdir :LR)               
     (-dep-- "use"
             (comp "DML")          
             (comp "donuts")
             (comp "Graphviz"))))
#+END_SRC

Output image:

[[https://raw.githubusercontent.com/cuichaox/dml/master/demo/dml.png][file:demo/dml.png]] 

Evalate expression:
#+BEGIN_SRC lisp
($ (:outfile "class.png")
   (with-method ("+ play () : Love" "+ work () : Hate")
      (-genby-* (full-class "OS"
                            "abstract"
                            (attributes "- name : String"
                                        "- born : Date"))
                               
                (full-class "Linux")
                (full-class "Android")
                (full-class "Apple")
                (full-class "Windows"))
      (-dep- "from" (@name "Android")
                    (@name "Linux"))))
#+END_SRC

Output Image:

[[https://raw.githubusercontent.com/cuichaox/dml/master/demo/class.png][file:demo/class.png]] 

Evalate expression:

#+BEGIN_SRC lisp
($ (:outfile "ucase.png")
   (& (:rankdir :LR)
      (->> (actor "user")
           (ucas "Use Emacs")
           (ucas "Programing")
           (ucas "Play game"))
      (-dep- "extend"
             (@name "Programing")
             (@name "Use Emacs"))))
#+END_SRC lisp

Output Image:

[[https://raw.githubusercontent.com/cuichaox/dml/master/demo/ucase.png][file:demo/ucase.png]] 

